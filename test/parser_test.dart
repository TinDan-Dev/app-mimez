import 'dart:math';

import 'package:mimez/mimez.dart';
import 'package:test/test.dart';

const pngHeaders = [
  [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52],
  [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52],
  [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52],
];

const gifHeaders = [
  [0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x90, 0x01, 0x90, 0x01, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00],
  [0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0xe0, 0x01, 0x0e, 0x01, 0xf7, 0xbe, 0x00, 0x1f, 0x28, 0x22],
  [0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x71, 0x01, 0xc8, 0x00, 0xf7, 0xe6, 0x00, 0x07, 0x00, 0x01],
];

const jpegHeaders = [
  [0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01],
];

const heifHeaders = [
  [
    0x00,
    0x00,
    0x00,
    0x14,
    0x66,
    0x74,
    0x79,
    0x70,
    0x68,
    0x65,
    0x69,
    0x63,
    0x00,
    0x00,
    0x00,
    0x00,
    0x6d,
    0x69,
    0x66,
    0x31
  ],
  [
    0x00,
    0x00,
    0x00,
    0x18,
    0x66,
    0x74,
    0x79,
    0x70,
    0x68,
    0x65,
    0x69,
    0x63,
    0x00,
    0x00,
    0x00,
    0x00,
    0x6d,
    0x69,
    0x66,
    0x31,
    0x68,
    0x65,
    0x69,
    0x63
  ],
];

void main() {
  group('mine type from binary', () {
    test('should be a png', () {
      for (final header in pngHeaders) expect(determineMimeType(header), equals(MimeType.png));
    });

    test('should be a gif', () {
      for (final header in gifHeaders) expect(determineMimeType(header), equals(MimeType.gif));
    });

    test('should be a jpeg', () {
      for (final header in jpegHeaders) expect(determineMimeType(header), equals(MimeType.jpeg));
    });

    test('should be a heif', () {
      for (final header in heifHeaders) expect(determineMimeType(header), equals(MimeType.heif));
    });

    test('should be a nothing', () {
      final r = Random(0xa1a1a1a1);

      for (int i = 0; i < 0xa1; i++) {
        final header = [
          for (int k = 0; k < 40; k++) r.nextInt(255),
        ];

        expect(determineMimeType(header), isNull);
      }
    });
  });

  group('mime type from extension', () {
    test('should be a png', () {
      expect(determineMimeTypeFromExtension('png'), equals(MimeType.png));
    });

    test('should ignore leading dots', () {
      expect(determineMimeTypeFromExtension('.png'), equals(MimeType.png));
    });

    test('should not ignore not leading dots', () {
      expect(determineMimeTypeFromExtension('.pn.g'), isNull);
    });
  });
}
